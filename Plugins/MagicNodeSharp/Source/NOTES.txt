________________________________________________________________________________________________________________________________________________

	/// LOAD A NODE ASSEMBLY:

	{
		size_t length = 0;
		MonoImageOpenStatus status;
		char* data = File::Read(StringCast<ANSICHAR>(*DIRxDOM).Get(),&length);
		//
		UnrealImage = mono_image_open_from_data_with_name(
			data, length, true, &status, false,
			StringCast<ANSICHAR>(*DIRxDOM).Get()
		);///
		//
		if (status!=MONO_IMAGE_OK||UnrealImage==nullptr) {
			LOG_CS(ESeverity::Fatal,TEXT("Error loading UnrealEngine.dll"));
		}///
		//
		UnrealAssembly = mono_assembly_load_from_full(UnrealImage,StringCast<ANSICHAR>(*DIRxDOM).Get(),&status,false);
		//
		if (status!=MONO_IMAGE_OK||UnrealAssembly==nullptr) {
			mono_image_close(UnrealImage); LOG_CS(ESeverity::Fatal,TEXT("Error loading UnrealEngine.dll"));
		}///
	}

________________________________________________________________________________________________________________________________________________


	{/// TEMP:
		MonoClass* klass = mono_class_from_name(CoreImage, CS_CORE_NAMESPACE, CS_NODE_CLASS);
		if (klass == nullptr) {LOG_CS(ESeverity::Error,TEXT("C# failed to load class.")); return;}
		//
		// create the class (doesn't run constructors)
		MonoObject* obj = mono_object_new(CoreDomain, klass);
		if (obj == nullptr) {LOG_CS(ESeverity::Error,TEXT("C# failed to load class instance.")); return;}
		//
		// run constructor
		mono_runtime_object_init(obj);
		//
		// find the Run() method
		auto method = mono_find_method(klass, "Run");
		MonoObject *result/*, *exception*/;
		//
		// call the Run method. This will block until the managed code decides to exit
		result = mono_runtime_invoke(method, obj, NULL, NULL);
		///int val = *(int*)mono_object_unbox(result);
		//
		auto method2 = mono_find_method(klass, "Main");
		mono_runtime_invoke(method2, NULL, NULL, NULL); // static method
	}/// end  TEMP

________________________________________________________________________________________________________________________________________________


	MonoClass* klass = nullptr;
	MonoObject* obj = nullptr;

	{/// TEMP:
		klass = mono_class_from_name(CoreImage, CS_CORE_NAMESPACE, CS_NODE_CLASS);
		if (klass == nullptr) {LOG_CS(ESeverity::Error,TEXT("C# failed to load class.")); return;}
		//
		// create the class (doesn't run constructors)
		obj = mono_object_new(PlayDomain, klass);
		if (obj == nullptr) {LOG_CS(ESeverity::Error,TEXT("C# failed to load class instance.")); return;}
		//
		// run constructor
		mono_runtime_object_init(obj);
		//
		// find the BeginPlay() method
		auto method = mono_find_method(klass, "BeginPlay");
		MonoObject *result/*, *exception*/;
		//
		// call the Run method. This will block until the managed code decides to exit
		result = mono_runtime_invoke(method, obj, NULL, NULL);
		int val = *(int*)mono_object_unbox(result);
		//
		LOG_CS(ESeverity::Warning,FString::Printf(TEXT("Returned value:   %i"),val));
	}/// end  TEMP

________________________________________________________________________________________________________________________________________________


	{/// TEMP:
		// find the Print() method
		auto method = mono_find_method(klass, "Print");
		//
		// CHAR-8 String:
		///const ANSICHAR* Astr = StringCast<ANSICHAR>(TEXT("This is a ANSI String coming from Unreal Engine's C++!")).Get();
		///MonoString *str = mono_string_new(PlayDomain,Astr);
		//
		// UTF-16 String:
		FString myString(TEXT("This is a UTF-16 String coming from Unreal Engine's C++! \u00D6"));
		const WIDECHAR* Astr = StringCast<WIDECHAR>(*myString).Get();
		MonoString *str = mono_string_new_utf16(PlayDomain,Astr,myString.Len()+1);
		//
		void* args[1]; args[0] = str;
		mono_runtime_invoke(method, obj, args, NULL);
	}/// end  TEMP

________________________________________________________________________________________________________________________________________________


	/// Mono Assembly's classes iterator:
	std::list<MonoClass*> GetAssemblyClassList(MonoImage * image)
	{
		std::list<MonoClass*> class_list;

		const MonoTableInfo* table_info = mono_image_get_table_info(image, MONO_TABLE_TYPEDEF);

		int rows = mono_table_info_get_rows(table_info);

		/* For each row, get some of its values */
		for (int i = 0; i < rows; i++) 
		{
			MonoClass* _class = nullptr;
			uint32_t cols[MONO_TYPEDEF_SIZE];
			mono_metadata_decode_row(table_info, i, cols, MONO_TYPEDEF_SIZE);
			const char* name = mono_metadata_string_heap(image, cols[MONO_TYPEDEF_NAME]);
			const char* name_space = mono_metadata_string_heap(image, cols[MONO_TYPEDEF_NAMESPACE]);
			_class = mono_class_from_name(image, name_space, name);
			class_list.push_back(_class);
		}
		return class_list
	}

________________________________________________________________________________________________________________________________________________


	/// Loop through a class properties (fields with get/set):
	void* iter = nullptr;
	MonoProperty *prop;
	//
	while ((prop=mono_class_get_properties(MonoRuntime.GetThreadAttributes(),&iter)) != NULL) {
		LOG_CS(ESeverity::Warning,
			FString::Printf(
				TEXT("Property: %s, flags 0x%x\n"),
				StringCast<TCHAR>(mono_property_get_name(prop)).Get(),
				mono_property_get_flags(prop)
			)
		);
	}

________________________________________________________________________________________________________________________________________________


	/// exceptions:
	if (exception) {
		const char* message = mono_string_to_utf8(mono_object_to_string(exception,NULL));
		LOG_CS(ESeverity::Error,StringCast<TCHAR>(message).Get());
	}

________________________________________________________________________________________________________________________________________________