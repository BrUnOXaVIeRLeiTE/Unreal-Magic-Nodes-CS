//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2021 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "MCS_File.h"

#include <cstdarg>
#include <fstream>
#include <iostream>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::string File::ExecDir;
char File::PathSeparator;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void File::SetExecDir(const char* path) {
	std::string::size_type n;
	std::string s(path);
	//
	PathSeparator = '/';
	n = s.rfind(PathSeparator);
	//
	if (n==std::string::npos) {
		PathSeparator = '\\';
		n = s.rfind(PathSeparator);
	}///
	//
	if (n < s.length()) {
		ExecDir = s.substr(0,s.length())+PathSeparator;
	} else {
		ExecDir = s.substr(0,n);
	}///
}

std::string File::Read(std::string filename) {
	std::ifstream file(filename.c_str());
	if (file) {
		file.seekg(0, file.end);
		auto length = file.tellg();
		file.seekg(0, file.beg);
		//
		std::string str;
		str.resize(length);
		file.read(&str[0],length);
		file.close();
		//
		return str;
	}///
	//
	return std::string();
}

char* File::Read(std::string filename, size_t* len) {
	std::ifstream file(filename.c_str(),std::ifstream::binary);
	//
	if (file) {
		file.seekg(0, file.end);
		auto length = file.tellg();
		*len = length;
		file.seekg(0, file.beg);
		//
		char* arr = new char[length];
		file.read(arr,length);
		file.close();
		//
		return arr;
	}///
	//
	return nullptr;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////