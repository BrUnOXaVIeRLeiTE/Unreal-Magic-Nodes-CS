//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2021 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "MCS_MonoThread.h"
#include "MagicNodeSharp.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint64 FMonoRunnable::ThreadID = 0;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FMonoRunnable::FMonoRunnable(TFunction<void()>InFunction) {
	FunctionPtr = InFunction;
	Finished = false;
	ID = ThreadID;
	//
	FString StatGroup = FString::Printf(TEXT("MonoTask.%d"),ThreadID);
	Thread = FRunnableThread::Create(this,*StatGroup,0,TPri_Normal);
	//
	ThreadID++;
}

FMonoRunnable* FMonoRunnable::MonoTask(TFunction<void()>InFunction) {
	if (FPlatformProcess::SupportsMultithreading()) {
		return new FMonoRunnable(InFunction);
	} else {return nullptr;}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool FMonoRunnable::Init() {
	return true;
}

uint32 FMonoRunnable::Run() {
	SCOPE_CYCLE_COUNTER(STAT_FMonoMethod_AsyncTask);
	//
	if (FunctionPtr) {FunctionPtr();} return 0;
}

void FMonoRunnable::Stop() {
	Finished = true;
}

void FMonoRunnable::Exit() {
	Finished = true;
	delete this;
}

bool FMonoRunnable::IsRunning() const {
	return !Finished;
}

void FMonoRunnable::EnsureCompletion() {
	Stop(); Thread->WaitForCompletion();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////