//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2021 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "IMagicNodeSharpKismet.h"
#include "IContentBrowserSingleton.h"

#include "MagicNodeSharp.h"

#include "KCS_NodeStyle.h"

#include "LevelEditor.h"

#if WITH_EDITOR
  #include "ISettingsModule.h"
  #include "ISettingsSection.h"
  #include "ISettingsContainer.h"
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Reflection API:

template<typename T>
T* GetBlueprintCDO(UBlueprint* Blueprint) {
	if (Blueprint==nullptr) {return nullptr;}
	//
	const UClass* BlueprintClass = Blueprint->GeneratedClass;
	if (BlueprintClass && BlueprintClass->ClassDefaultObject) {
		return Cast<T>(BlueprintClass->ClassDefaultObject);
	} return nullptr;
}

UBlueprint* GetBlueprintFromCDO(UObject* OBJ) {
	UBlueprint* BP = nullptr;
	//
	if (OBJ != nullptr) {
		BP = Cast<UBlueprint>(OBJ);
		//
		if (BP == nullptr) {
			BP = Cast<UBlueprint>(OBJ->GetClass()->ClassGeneratedBy);
		}///
	} return BP;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define LOCTEXT_NAMESPACE "Synaptech"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void FMagicNodeSharpKismet::StartupModule() {
	MonoKismet_INIT_BASE();
	//
	FKCS_NodeStyle::Initialize();
	//
	RegisterSettings();
}

void FMagicNodeSharpKismet::ShutdownModule() {
	FKCS_NodeStyle::Shutdown();
	//
	if (UObjectInitialized()) {UnregisterSettings();}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef LOCTEXT_NAMESPACE

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IMPLEMENT_MODULE(FMagicNodeSharpKismet,MagicNodeSharpKismet);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////